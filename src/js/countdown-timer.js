const refs = {
  clockface: document.querySelector('.js-clockface'),
};

export default class CountdownTimer {
  constructor({ selector, targetDate }) {
    this.intervalId = null;
    this.selector = selector;
    this.targetDate = targetDate;

    this.start();
  }

  start() {
    this.intervalId = setInterval(() => {
      const currentTime = Date.now();
      const deltaTime = this.targetDate - currentTime;
      const time = this.getTimeComponents(deltaTime);

      this.updateClockface(time);
    }, 1000);
  }

  /*
   * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
   * - –†–∏—Å—É–µ—Ç –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
   */
  updateClockface({ days, hours, mins, secs }) {
    refs.clockface.innerHTML = `<div class="timer" id="${this.selector}">
        <div class="field">
          <span class="value" data-value="days">
            ${days}
          </span>
          <span class="label">Days</span>
        </div>

        <div class="field">
          <span class="value" data-value="hours">
            ${hours}
          </span>
          <span class="label">Hours</span>
        </div>

        <div class="field">
          <span class="value" data-value="mins">
            ${mins}
          </span>
          <span class="label">Minutes</span>
        </div>

        <div class="field">
          <span class="value" data-value="secs">
            ${secs}
          </span>
          <span class="label">Seconds</span>
        </div>
      </div>`;
  }

  /*
   * - –ü—Ä–∏–Ω–∏–º–∞–µ—Ç –≤—Ä–µ–º—è –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö
   * - –í—ã—Å—á–∏—Ç—ã–≤–∞–µ—Ç —Å–∫–æ–ª—å–∫–æ –≤ –Ω–∏—Ö –≤–º–µ—â–∞–µ—Ç—Å—è —á–∞—Å–æ–≤/–º–∏–Ω—É—Ç/—Å–µ–∫—É–Ω–¥
   * - –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—å–µ–∫—Ç —Å–æ —Å–≤–æ–π—Å—Ç–≤–∞–º–∏ hours, mins, secs
   * - –ê–¥—Å–∫–∞—è –∫–æ–ø–∏–ø–∞—Å—Ç–∞ —Å–æ —Å—Ç–µ–∫–∞ üí©
   */
  getTimeComponents(time) {
    /*
     * –û—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–Ω–∏: –¥–µ–ª–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ UTC –Ω–∞ 1000 * 60 * 60 * 24, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–º –¥–Ω–µ (–º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã * —Å–µ–∫—É–Ω–¥—ã * –º–∏–Ω—É—Ç—ã * —á–∞—Å—ã)
     */
    const days = this.pad(Math.floor(time / (1000 * 60 * 60 * 24)));

    /*
     * –û—Å—Ç–∞–≤—à–∏–µ—Å—è —á–∞—Å—ã: –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞—Ç–æ–∫ –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Ä–∞—Å—á–µ—Ç–∞ —Å –ø–æ–º–æ—â—å—é –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞
     * –æ—Å—Ç–∞—Ç–∫–∞ % –∏ –¥–µ–ª–∏–º –µ–≥–æ –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–º —á–∞—Å–µ
     * (1000 * 60 * 60 = –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã * –º–∏–Ω—É—Ç—ã * —Å–µ–∫—É–Ω–¥—ã)
     */
    const hours = this.pad(
      Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)),
    );

    /*
     * –û—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∏–Ω—É—Ç—ã: –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –º–∏–Ω—É—Ç—ã –∏ –¥–µ–ª–∏–º –∏—Ö –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–π –º–∏–Ω—É—Ç–µ (1000 * 60 = –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã * —Å–µ–∫—É–Ω–¥—ã)
     */
    const mins = this.pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));

    /*
     * –û—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã: –ø–æ–ª—É—á–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è —Å–µ–∫—É–Ω–¥—ã –∏ –¥–µ–ª–∏–º –∏—Ö –Ω–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
     * –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥ –≤ –æ–¥–Ω–æ–π —Å–µ–∫—É–Ω–¥–µ (1000)
     */
    const secs = this.pad(Math.floor((time % (1000 * 60)) / 1000));

    return { days, hours, mins, secs };
  }

  /*
   * –ü—Ä–∏–Ω–∏–º–∞–µ—Ç —á–∏—Å–ª–æ, –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ —Å—Ç—Ä–æ–∫–µ –∏ –¥–æ–±–∞–≤–ª—è–µ—Ç –≤ –Ω–∞—á–∞–ª–æ 0 –µ—Å–ª–∏ —á–∏—Å–ª–æ –º–µ–Ω—å—à–µ 2-—Ö –∑–Ω–∞–∫–æ–≤
   */
  pad(value) {
    return String(value).padStart(2, '0');
  }
}
